version: 2.1

executors:
  node:
    docker:
      - image: node:16-alpine

  docker-publisher:
    environment:
      PIPLINE_NUMBER: << pipeline.number >>
    docker:
      - image: docker:stable

jobs:
  test:
    executor: node
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            npm install
      - run: 
          name: Run test
          command: |
            npm run test
  lint:
    executor: node
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            npm install
      - run:
          name: Lint project
          command: |
            npm run lint
  
  analyze:
    executor: node
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            npm install
      - run:
          name: Analyze project dependencies
          command: |
            npm audit

  build_docker_image:
    executor: docker-publisher
    steps:
        - checkout
        - setup_remote_docker
        - run:
            name: Build docker image
            command: |
              export TAG="ddanny99/sort-ms:v1.0.${PIPLINE_NUMBER}"
              docker build --tag="${TAG}" .
        - run:
            name: Save Docker image
            command: |
              export TAG="ddanny99/sort-ms:v1.0.${PIPLINE_NUMBER}"
              docker save --output image.tar "${TAG}"
        - persist_to_workspace:
            root: .
            paths:
              - ./image.tar
  
  push_docker_image:
    executor: docker-publisher
    steps:
      - checkout
      - setup_remote_docker
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Load Docker image
          command: |
            docker load --input /tmp/workspace/image.tar
      - run:
          name: Publish Docker image
          command: |
            export TAG="ddanny99/sort-ms:v1.0.${PIPLINE_NUMBER}"
            docker tag ${TAG} ${TAG}
            docker login -u "${DOCKER_USERNAME}" -p "${DOCKER_PASSWORD}"
            docker push ${TAG}
      - run: 
            name: Print tag
            command: |
              echo ${PIPLINE_NUMBER}

  deploy_to_cluster:
    docker:
      - image: alpine:latest
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk --no-cache add curl tar gzip
            apk add aws-cli
      - run:
          name: Install eksctl
          command: |
            curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
            mv /tmp/eksctl /usr/local/bin
      - run:
          name: Install kubectl
          command: |
            curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl
            chmod +x ./kubectl
            mv ./kubectl /usr/local/bin/kubectl
      - run:
          name: Update Kube Config
          command: |
            aws eks --region us-east-1 update-kubeconfig --name sort-ms
      - run:
          name: Rollout deployment
          command: |
            # kubectl get pods --show-labels
            # kubectl get pods
            # kubectl describe pods
            export TAG="ddanny99/sort-ms:v1.0.${PIPLINE_NUMBER}"
            kubectl set image deployments/sort-ms sort-ms=${TAG}
      - run:
          name: Serve deployment
          command: |
            export POD_NAME=$(cat kubectl get pods --template '{{range .items}}{{.metadata.name}}{{"\n"}}{{end}}')
            echo $POD_NAME
            # kubectl port-forward $POD_NAME 8080:8080
              
workflows:
  ci:
    jobs:
      - test
      - lint
      - analyze
      - build_docker_image:
          requires: [test, lint, analyze]
          filters:
            branches:
              only: [main]
      - push_docker_image:
          requires: [build_docker_image]
      - deploy_to_cluster:
          requires: [push_docker_image]